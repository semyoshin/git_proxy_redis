
lua_package_path "/usr/share/lua/5.1/nginx/?.lua;;";
lua_socket_pool_size 100;
lua_socket_connect_timeout 10ms;
lua_socket_read_timeout 10ms;

server {
	listen 80 default_server;

	root /var/www/html;

	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		  resolver 1.1.1.1 [::1];
			set $backend_host "https://github.com";
			access_by_lua '
				local redis = require "redis"
			  local red = redis:new()
			  local ok, err = red:connect("172.24.0.1", 6379)
			  if not ok then
			    ngx.log(ngx.ERR, "failed to connect to redis: ", err)
			    return ngx.exit(500)
			  end

				if(ngx.var.http_authorization ~= nil) then
					  local token = tostring(ngx.var.http_authorization)

					  token = token:gsub("Basic ", "")
					  token = ngx.decode_base64(token)
					  token = token:gsub(":", "")

					  local found_token, err = red:get(token)

					  if (found_token == ngx.null and ngx.var.http_authorization ~= nil) then
					    ngx.log(ngx.ERR, "Token not found or valid: ", token)
					    return ngx.exit(403)
					  end

						if found_token ~= nil then
							local access_token = found_token:match("^%w+://([^@]+)")
							local domain = found_token:match("%w+@([^/]+)")
							local index = string.find(found_token, "/", string.len(access_token));
							local uri = string.sub(found_token, index)
						  local auth_header = "Basic " .. ngx.encode_base64(access_token)

						  ngx.req.set_header("Authorization", auth_header)
							-- ngx.req.set_uri(uri .. "/info/refs?service=git-upload-pack")
							ngx.var.backend_host = "https://"..domain
						end
			  else
				-- set some default address
				-- ngx.req.set_uri("/semyoshin/git_proxy_redis.git/info/refs?service=git-upload-pack")
				-- return ngx.exit(401)
				end
				';
			proxy_pass  $backend_host;
		  proxy_http_version 1.1;
	}
}
